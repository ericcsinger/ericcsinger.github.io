<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Scripting on Eric&#39;s Blog</title>
    <link>https://ericcsinger.com/tags/scripting/</link>
    <description>Recent content in Scripting on Eric&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â©2025, Eric C. Singer
</copyright>
    <lastBuildDate>Sun, 15 May 2016 19:57:35 +0000</lastBuildDate><atom:link href="https://ericcsinger.com/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problem Solving: Chasing SQL&#39;s Dump</title>
      <link>https://ericcsinger.com/problem-solving-chasing-sqls-dump/</link>
      <pubDate>Sun, 15 May 2016 19:57:35 +0000</pubDate>
      <guid>https://ericcsinger.com/problem-solving-chasing-sqls-dump/</guid>
      <description><![CDATA[<h1 id="the-problem" data-numberify>The Problem:<a class="anchor ms-1" href="#the-problem"></a></h1>
<p>For years as an admin Iâ€™ve had to deal with SQL. At a former employer, our SQL environment / databases were small, and backup licensing was based on agents, not capacity. Fast forward to my current employer, we have a fairly decent sized SQL environment (60 â€“ 70 servers), our backupâ€™s are large , licensing is based on capacity, and we have a full time DBA crew that manage their own backup schedules, and prefer that backupâ€™s are managed by them. What that means is dealing with a ton of dumps. Read into that as you want ðŸ™‚</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSVMwareVirtualDiskToWindowsLogicalDiskMapping</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsvmwarevirtualdisktowindowslogicaldiskmapping/</link>
      <pubDate>Sat, 26 Dec 2015 21:56:08 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsvmwarevirtualdisktowindowslogicaldiskmapping/</guid>
      <description><![CDATA[<p>Building off my last function <a href="https://github.com/ericcsinger/powershell_microsoft_windows_get-ecsphysicaldisktologicaldiskmapping" target="_blank" rel="noopener noreferrer">Get-ECSPhysicalDiskToLogicalDiskMapping<i class="fas fa-external-link-square-alt ms-1"></i></a>: which took a windows physical disk and mapped it to a windows logical disk, this function will take a VMware virtual disk and map it to a windows logical disk.</p>
<p>This function has the following dependencies and assumptions:</p>
<ul>
<li>It depends on my windows physical to logical function and all its dependencies.</li>
<li>It assumes your VM name matches your windows server name</li>
<li>It assumes youâ€™ve pre-loaded the VMware powershell snap-in.</li>
</ul>
<p>The basic way the function works, is it starts by getting the windows physical to logical mapping and storing that in an array. This array houses two key peaces of information.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSPhysicalDiskToLogicalDiskMapping</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsphysicaldisktologicaldiskmapping/</link>
      <pubDate>Sun, 20 Dec 2015 16:50:39 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsphysicaldisktologicaldiskmapping/</guid>
      <description><![CDATA[<p>I figured it was about time to knock out something a little technical for a change, and I figured Iâ€™d start with this little function, which is part of a larger script that Iâ€™ll talk more about later.</p>
<p>There may be a time where you need to find the relationship between a physical disk drive and your logical drive. In my case, I had a colleague ask me if there was an easy way to match a VMware disk to a Window disk so he could extend the proper drive. After digging into it a bit, I determined it was possible, but it was going to take a little work. One of the prerequisites is to first find which drive letter belongs to which physical disk (from windows view).</p>]]></description>
    </item>
    
  </channel>
</rss>

