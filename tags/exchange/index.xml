<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exchange on Eric&#39;s Blog</title>
    <link>http://ericcsinger.com/tags/exchange/</link>
    <description>Recent content in exchange on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©{year}, Eric C. Singer</copyright>
    <lastBuildDate>Sat, 02 Mar 2019 22:03:38 +0000</lastBuildDate><atom:link href="http://ericcsinger.com/tags/exchange/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deleting msExchActiveSyncDevice container after migrating to Office 365</title>
      <link>http://ericcsinger.com/posts/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</link>
      <pubDate>Sat, 02 Mar 2019 22:03:38 +0000</pubDate>
      
      <guid>http://ericcsinger.com/posts/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</guid>
      <description>We migrated to Office 365 last year and were are in the process of cleaning up some items left behind. One of the many things we’ve needed to clean up is stale activesync devices. I wanted to share a very simplified example of the code I used to delete the container in case it helps anyone in the future.
&amp;lt;pre class=&amp;quot;brush: powershell; title: ; notranslate&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;$UserNamePattern = &amp;quot;*singer*&amp;quot;$AllActiveSyncDevices = Get-ADObject -filter { ObjectClass -like &#39;msExchActiveSyncDevice&#39;} | Where-Object {$_.</description>
    </item>
    
    <item>
      <title>Powershell Scripting: Microsoft Exchange, Configure client-specific message size limits</title>
      <link>http://ericcsinger.com/posts/powershell-scripting-microsoft-exchange-configure-client-specific-message-size-limits/</link>
      <pubDate>Mon, 03 Jul 2017 22:14:22 +0000</pubDate>
      
      <guid>http://ericcsinger.com/posts/powershell-scripting-microsoft-exchange-configure-client-specific-message-size-limits/</guid>
      <description>Introduction:If you don’t know by now, I’m a huge PowerShell fan. It’s my go to scripting language for anything related to Microsoft (and non-Microsoft) automation and administration. So when it came time to automating post exchange cumulative update setting, I was a bit surprised to see some of the code examples from Microsoft, not containing any PowerShell example. Surprised is probably the wrong word, how about annoyed? I mean, after all, this is not only the company that shoved this awesome scripting language down our throat, but also the very team that was the first one to have a comprehensive set of admin abilities via PowerShell.</description>
    </item>
    
  </channel>
</rss>
