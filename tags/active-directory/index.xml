<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>active directory on Eric&#39;s Blog</title>
    <link>https://ericcsinger.com/tags/active-directory/</link>
    <description>Recent content in active directory on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2023, Eric C. Singer
</copyright>
    <lastBuildDate>Sat, 24 Jun 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://ericcsinger.com/tags/active-directory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PGAdmin Azure AD Authentication Token Renewal</title>
      <link>https://ericcsinger.com/pgadmin-azure-ad-authentication-token-renewal/</link>
      <pubDate>Sat, 24 Jun 2023 12:00:00 +0000</pubDate>
      
      <guid>https://ericcsinger.com/pgadmin-azure-ad-authentication-token-renewal/</guid>
      <description><![CDATA[IntroductionMicrosoft recently released Azure Active Directory (AzureAD) authentication support for Azure PostgreSQL Flexible Server (AzPG). I&rsquo;m a huge proponent of leveraging AzureAD whenever possible, over local accounts, keys, etc. There all sorts of pros to this approach, none of which I&rsquo;m going to dive into.
What we will dive into, is the fact that PGAdmin, the most popular GUI for PostgreSQL, doesn&rsquo;t natively support Azure AD authentication, and how I worked around that.]]></description>
    </item>
    
    <item>
      <title>PowerShell: Remove a failed domain controller</title>
      <link>https://ericcsinger.com/powershell-remove-a-failed-domain-controller/</link>
      <pubDate>Thu, 26 Nov 2020 20:00:00 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-remove-a-failed-domain-controller/</guid>
      <description><![CDATA[PowerShell: Remove a failed domain controllerVersion: 1.0.1
Introduction:Let&rsquo;s face it, removing a domain controller via the GUI is easy, but sometimes you just want to know how to automate something. In my research there was a lot of resources on how to cleanup using the GUI, or via NTDS. Nothing about utilizing PowerShell.
ParametersLet&rsquo;s start by estalishing some parameters
#Array to hold roles of original DC $All_Roles_To_Move = New-Object -TypeName &#34;System.]]></description>
    </item>
    
    <item>
      <title>Deleting msExchActiveSyncDevice container after migrating to Office 365</title>
      <link>https://ericcsinger.com/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</link>
      <pubDate>Sat, 02 Mar 2019 22:03:38 +0000</pubDate>
      
      <guid>https://ericcsinger.com/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</guid>
      <description><![CDATA[We migrated to Office 365 last year and were are in the process of cleaning up some items left behind. One of the many things we’ve needed to clean up is stale activesync devices. I wanted to share a very simplified example of the code I used to delete the container in case it helps anyone in the future.
&lt;pre class=&#34;brush: powershell; title: ; notranslate&#34; title=&#34;&#34;&gt;$UserNamePattern = &#34;*singer*&#34;$AllActiveSyncDevices = Get-ADObject -filter { ObjectClass -like &#39;msExchActiveSyncDevice&#39;} | Where-Object {$_.]]></description>
    </item>
    
  </channel>
</rss>

