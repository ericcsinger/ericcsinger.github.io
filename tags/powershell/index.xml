<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>powershell on Eric&#39;s Blog</title>
    <link>https://ericcsinger.com/tags/powershell/</link>
    <description>Recent content in powershell on Eric&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2023, Eric C. Singer
</copyright>
    <lastBuildDate>Sun, 30 Oct 2022 12:00:00 +0000</lastBuildDate><atom:link href="https://ericcsinger.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Naming Conventions: Azure Locations</title>
      <link>https://ericcsinger.com/naming-conventions-azure-locations/</link>
      <pubDate>Sun, 30 Oct 2022 12:00:00 +0000</pubDate>
      
      <guid>https://ericcsinger.com/naming-conventions-azure-locations/</guid>
      <description><![CDATA[Introduction It&rsquo;s been a while since I&rsquo;ve blogged about naming conventions. For most it&rsquo;s not an interesting topic, and for many, it&rsquo;s the last thing on their mind. While I would never say I get joy out of creating a good naming convention, I do get a sense of satisfaction and pride. For this blog post, I want to document how I&rsquo;ve tackled getting consistent naming out of an inconsistent Azure location name.]]></description>
    </item>
    
    <item>
      <title>PowerShell: Find orphaned disks in Azure and their cost</title>
      <link>https://ericcsinger.com/powershell-find-orphaned-disks-in-azure-and-their-cost/</link>
      <pubDate>Sat, 06 Feb 2021 16:00:00 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-find-orphaned-disks-in-azure-and-their-cost/</guid>
      <description><![CDATA[PowerShell: Find orphaned disks in Azure and their cost Version: 1.0.1
Introduction: Just wanted to get something super simple out there. I was curious how many unattatched disks our Azure portal had and what it was costing us. This little script will give us the basic answer to that question.
The script This will loop through all subscriptions and gather all disks with a status of &ldquo;unattatched&rdquo;. Then it will try to find out how much they cost.]]></description>
    </item>
    
    <item>
      <title>PowerShell: Remove a failed domain controller</title>
      <link>https://ericcsinger.com/powershell-remove-a-failed-domain-controller/</link>
      <pubDate>Thu, 26 Nov 2020 20:00:00 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-remove-a-failed-domain-controller/</guid>
      <description><![CDATA[PowerShell: Remove a failed domain controller Version: 1.0.1
Introduction: Let&rsquo;s face it, removing a domain controller via the GUI is easy, but sometimes you just want to know how to automate something. In my research there was a lot of resources on how to cleanup using the GUI, or via NTDS. Nothing about utilizing PowerShell.
Parameters Let&rsquo;s start by estalishing some parameters
#Array to hold roles of original DC $All_Roles_To_Move = New-Object -TypeName &#34;System.]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.WSUS v1.1.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.1.0/</link>
      <pubDate>Sun, 05 May 2019 21:11:08 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.1.0/</guid>
      <description><![CDATA[Functions released in this module: Get-ECSWSUSUpdateReport ]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.All v2.3.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.all-v2.3.0/</link>
      <pubDate>Sun, 05 May 2019 21:09:30 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-module-release-ecs.all-v2.3.0/</guid>
      <description><![CDATA[This is the easiest way to install all my modules in one shot.
Sub-modules released in this module:
ECS.WSUS 1.1.0 ]]></description>
    </item>
    
    <item>
      <title>Deleting msExchActiveSyncDevice container after migrating to Office 365</title>
      <link>https://ericcsinger.com/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</link>
      <pubDate>Sat, 02 Mar 2019 22:03:38 +0000</pubDate>
      
      <guid>https://ericcsinger.com/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</guid>
      <description><![CDATA[We migrated to Office 365 last year and were are in the process of cleaning up some items left behind. One of the many things we’ve needed to clean up is stale activesync devices. I wanted to share a very simplified example of the code I used to delete the container in case it helps anyone in the future.
&lt;pre class=&#34;brush: powershell; title: ; notranslate&#34; title=&#34;&#34;&gt;$UserNamePattern = &#34;*singer*&#34;$AllActiveSyncDevices = Get-ADObject -filter { ObjectClass -like &#39;msExchActiveSyncDevice&#39;} | Where-Object {$_.]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.WSUS v1.0.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.0.0/</link>
      <pubDate>Sat, 02 Mar 2019 21:21:30 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.0.0/</guid>
      <description><![CDATA[This is the initial release of my WSUS module. This is a module I put together to properly organize a lot of my one off WSUS functions.
I have found these functions useful for reporting n the status of computers in WSUS in mass. Querying the DB directly, while not recommended, is much faster than using the API, and you can get a lot more information out of it.
Functions released in this module: Connect-ECSWSUSDatabase Get-ECSWSUSComputerTarget Get-ECSWSUSComputerTargetGroup Get-ECSWSUSComputerTargetInTargetGroup Get-ECSWSUSComputerTargetReport Get-ECSWSUSUpdate Test-ECSWSUSDatabaseConnected You can learn more about the module here.]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.LocalGPO v2.1.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.localgpo-v2.1.0/</link>
      <pubDate>Sun, 16 Sep 2018 16:27:19 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-module-release-ecs.localgpo-v2.1.0/</guid>
      <description><![CDATA[This is the second release of my LocalGPO module. Mostly code enhancement, but a few property changes as well.
Functions released in this module:
Add-ECSLocalGPOUserRightAssignment Get-ECSLocalGPOUserRightAssignment Remove-ECSLocalGPOUserRightAssignment Show-ECSLocalGPOUserRightAssignment You can learn more about the module here.]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.All v2.1.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.all-v2.1.0/</link>
      <pubDate>Sun, 16 Sep 2018 16:22:53 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-module-release-ecs.all-v2.1.0/</guid>
      <description><![CDATA[This is the second release of my all encompassing module. This is the easiest way to install all my modules in one shot.
Sub-modules released in this module:
ECS.LocalGPO v2.1.0 ECS.WindowsGeneric v1.1.0 You can learn more about the module here.]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.WindowsGeneric v1.0.1</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.windowsgeneric-v1.0.1/</link>
      <pubDate>Sun, 15 Jul 2018 17:07:48 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-module-release-ecs.windowsgeneric-v1.0.1/</guid>
      <description><![CDATA[This is the first release of what I hope to be more Powershell modules. As mentioned in my earlier posts, I won’t go into details of the module in my posts, instead I’ll direct you to my GitHub page where you can read about the modules, it’s functions and release notes.
Functions released in this module:
Convert ECSSIDToAccount Convert ECSAccountToSID You can learn more about the module here.]]></description>
    </item>
    
    <item>
      <title>Problem Solving: VMware VM not reading VMDK serial number in OS</title>
      <link>https://ericcsinger.com/problem-solving-vmware-vm-not-reading-vmdk-serial-number-in-os/</link>
      <pubDate>Mon, 19 Mar 2018 12:52:31 +0000</pubDate>
      
      <guid>https://ericcsinger.com/problem-solving-vmware-vm-not-reading-vmdk-serial-number-in-os/</guid>
      <description><![CDATA[I created a function while ago that utilizes the VMDK serial number to map which VMDK is used for a Windows volume. Starting with Windows 10 / Server 2016, I noticed that I could no longer see the serial number of a VMDK insides the OS. After reaching out to VMware, turned out to be a really simple fix.
First let me share the relevant KB:
https://kb.vmware.com/s/article/52815
I would suggest you make sure this setting is present on all VM’s.]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSWSUSComputerUpdatesStatusReport</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecswsuscomputerupdatesstatusreport/</link>
      <pubDate>Sat, 07 Oct 2017 20:38:40 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-scripting-get-ecswsuscomputerupdatesstatusreport/</guid>
      <description><![CDATA[Introduction: I hate the WSUS reports built into the console. They’re slow, and when it comes to doing something useful with the data, it’s basically impossible. That’s why I wrote this function.
I wanted an ability to gather data on a given WSUS computer(s), and work with it in Powershell. This function gives me the ability to write scripts for bulk reports, automate my patching process (checking that all updates are done), and in general, gives me the same data the standard WSUS report does, but at a MUCH faster rate.]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Microsoft Exchange, Configure client-specific message size limits</title>
      <link>https://ericcsinger.com/powershell-scripting-microsoft-exchange-configure-client-specific-message-size-limits/</link>
      <pubDate>Mon, 03 Jul 2017 22:14:22 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-scripting-microsoft-exchange-configure-client-specific-message-size-limits/</guid>
      <description><![CDATA[Introduction: If you don’t know by now, I’m a huge PowerShell fan. It’s my go to scripting language for anything related to Microsoft (and non-Microsoft) automation and administration. So when it came time to automating post exchange cumulative update setting, I was a bit surprised to see some of the code examples from Microsoft, not containing any PowerShell example. Surprised is probably the wrong word, how about annoyed? I mean, after all, this is not only the company that shoved this awesome scripting language down our throat, but also the very team that was the first one to have a comprehensive set of admin abilities via PowerShell.]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSESXHostVIBToPCIDevices</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsesxhostvibtopcidevices/</link>
      <pubDate>Fri, 30 Jun 2017 21:20:28 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsesxhostvibtopcidevices/</guid>
      <description><![CDATA[Introduction: If you remember a little bit ago, I said I was trying to work around the lack of driver management with vendors. This function is the start of a few tools you can use to potentially make your life a little easier.
VMware’s drivers are VIBS (but not all VIBS are drivers). So the key to knowing if you have the correct drivers is to find which VIB matches which PCI device.]]></description>
    </item>
    
    <item>
      <title>Quicky Review: GPO/GPP vs. DSC</title>
      <link>https://ericcsinger.com/quicky-review-gpo/gpp-vs.-dsc/</link>
      <pubDate>Sun, 18 Sep 2016 16:10:12 +0000</pubDate>
      
      <guid>https://ericcsinger.com/quicky-review-gpo/gpp-vs.-dsc/</guid>
      <description><![CDATA[Introduction: If you’re not in a DevOps based shop, or living under a rock, you may not know that Microsoft has been working on a solution that by all accounts sounds like its poised to usurp GPO / GPP. The solution I’m talking about is Desired State Configuration, or DSC. According to all the marketing hype, DSC is the next best thing for IT since virtualization. If the vision comes to fruition, GPO and GPP will be a legacy solution.]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Invoke-ECSSQLQuery</title>
      <link>https://ericcsinger.com/powershell-scripting-invoke-ecssqlquery/</link>
      <pubDate>Mon, 04 Jul 2016 19:13:41 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-scripting-invoke-ecssqlquery/</guid>
      <description><![CDATA[Quick Powershell post for those of you that may on occasion want to retrieve data out of a SQL table via Powershell. I didn’t personally do most of the heavy lifting in this, I simply took some work that various folks out there did and put it into a repeatable function instead.
Firstly, head over to here to my GitHub if you want to grab it. I’ll be keeping it updated as change requests come in, or as I get new ideas, so make sure if you do use my function, that you check back in on occasion for new versions.]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSVMwareVirtualDiskToWindowsLogicalDiskMapping</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsvmwarevirtualdisktowindowslogicaldiskmapping/</link>
      <pubDate>Sat, 26 Dec 2015 21:56:08 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsvmwarevirtualdisktowindowslogicaldiskmapping/</guid>
      <description><![CDATA[Building off my last function Get-ECSPhysicalDiskToLogicalDiskMapping: which took a windows physical disk and mapped it to a windows logical disk, this function will take a VMware virtual disk and map it to a windows logical disk.
This function has the following dependencies and assumptions:
It depends on my windows physical to logical function and all its dependencies. It assumes your VM name matches your windows server name It assumes you’ve pre-loaded the VMware powershell snap-in.]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSPhysicalDiskToLogicalDiskMapping</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsphysicaldisktologicaldiskmapping/</link>
      <pubDate>Sun, 20 Dec 2015 16:50:39 +0000</pubDate>
      
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsphysicaldisktologicaldiskmapping/</guid>
      <description><![CDATA[I figured it was about time to knock out something a little technical for a change, and I figured I’d start with this little function, which is part of a larger script that I’ll talk more about later.
There may be a time where you need to find the relationship between a physical disk drive and your logical drive. In my case, I had a colleague ask me if there was an easy way to match a VMware disk to a Window disk so he could extend the proper drive.]]></description>
    </item>
    
  </channel>
</rss>

