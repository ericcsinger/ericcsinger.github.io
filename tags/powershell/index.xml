<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Powershell on Eric&#39;s Blog</title>
    <link>https://ericcsinger.com/tags/powershell/</link>
    <description>Recent content in Powershell on Eric&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>©2025, Eric C. Singer
</copyright>
    <lastBuildDate>Sat, 24 Jun 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://ericcsinger.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PGAdmin Azure AD Authentication Token Renewal</title>
      <link>https://ericcsinger.com/pgadmin-azure-ad-authentication-token-renewal/</link>
      <pubDate>Sat, 24 Jun 2023 12:00:00 +0000</pubDate>
      <guid>https://ericcsinger.com/pgadmin-azure-ad-authentication-token-renewal/</guid>
      <description><![CDATA[<h2 id="introduction" data-numberify>Introduction<a class="anchor ms-1" href="#introduction"></a></h2>
<p>Microsoft recently released Azure Active Directory (AzureAD) authentication support for Azure PostgreSQL Flexible Server (AzPG).  I&rsquo;m a huge proponent of leveraging AzureAD whenever possible, over local accounts, keys, etc.  There all sorts of pros to this approach, none of which I&rsquo;m going to dive into.</p>
<p>What we will dive into, is the fact that PGAdmin, the most popular GUI for PostgreSQL, doesn&rsquo;t natively support Azure AD authentication, and how I worked around that.  It&rsquo;s not that you can&rsquo;t login to AzPG with AzureAD.  Rather the issue is that the token expires after 60 minutes (max), and you have to reconnect to the server.  This is frustrating when dealing with a single server, and unusable when dealing with many.</p>]]></description>
    </item>
    
    <item>
      <title>Naming Conventions: Azure Locations</title>
      <link>https://ericcsinger.com/naming-conventions-azure-locations/</link>
      <pubDate>Sun, 30 Oct 2022 12:00:00 +0000</pubDate>
      <guid>https://ericcsinger.com/naming-conventions-azure-locations/</guid>
      <description><![CDATA[<h2 id="introduction" data-numberify>Introduction<a class="anchor ms-1" href="#introduction"></a></h2>
<p>It&rsquo;s been a while since I&rsquo;ve blogged about naming conventions.  For most it&rsquo;s not an interesting topic, and for many, it&rsquo;s the last thing on their mind.  While I would never say I get joy out of creating a good naming convention, I do get a sense of satisfaction and pride.  For this blog post, I want to document how I&rsquo;ve tackled getting consistent naming out of an inconsistent Azure location name.</p>]]></description>
    </item>
    
    <item>
      <title>PowerShell: Find orphaned disks in Azure and their cost</title>
      <link>https://ericcsinger.com/powershell-find-orphaned-disks-in-azure-and-their-cost/</link>
      <pubDate>Sat, 06 Feb 2021 16:00:00 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-find-orphaned-disks-in-azure-and-their-cost/</guid>
      <description><![CDATA[<h1 id="powershell-find-orphaned-disks-in-azure-and-their-cost" data-numberify>PowerShell: Find orphaned disks in Azure and their cost<a class="anchor ms-1" href="#powershell-find-orphaned-disks-in-azure-and-their-cost"></a></h1>
<p>Version: 1.0.1</p>

<h2 id="introduction" data-numberify>Introduction:<a class="anchor ms-1" href="#introduction"></a></h2>
<p>Just wanted to get something super simple out there.  I was curious how many unattatched disks our Azure portal had and what it was costing us.  This little script will give us the basic answer to that question.</p>

<h2 id="the-script" data-numberify>The script<a class="anchor ms-1" href="#the-script"></a></h2>
<p>This will loop through all subscriptions and gather all disks with a status of &ldquo;unattatched&rdquo;.  Then it will try to find out how much they cost.  Don&rsquo;t trust this blindly of course. The results can be parsed in the variable named &ldquo;$All_Az_Disks_Unattached&rdquo;.</p>]]></description>
    </item>
    
    <item>
      <title>PowerShell: Remove a failed domain controller</title>
      <link>https://ericcsinger.com/powershell-remove-a-failed-domain-controller/</link>
      <pubDate>Thu, 26 Nov 2020 20:00:00 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-remove-a-failed-domain-controller/</guid>
      <description><![CDATA[<h1 id="powershell-remove-a-failed-domain-controller" data-numberify>PowerShell: Remove a failed domain controller<a class="anchor ms-1" href="#powershell-remove-a-failed-domain-controller"></a></h1>
<p>Version: 1.0.1</p>

<h2 id="introduction" data-numberify>Introduction:<a class="anchor ms-1" href="#introduction"></a></h2>
<p>Let&rsquo;s face it, removing a domain controller via the GUI is easy, but sometimes you just want to know how to automate something.  In my research there was a lot of resources on how to cleanup using the GUI, or via NTDS.  Nothing about utilizing PowerShell.</p>

<h2 id="parameters" data-numberify>Parameters<a class="anchor ms-1" href="#parameters"></a></h2>
<p>Let&rsquo;s start by estalishing some parameters</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-PowerShell" data-lang="PowerShell"><span style="display:flex;"><span><span style="color:#75715e">#Array to hold roles of original DC</span>
</span></span><span style="display:flex;"><span>$All_Roles_To_Move = New-Object -TypeName <span style="color:#e6db74">&#34;System.Collections.ArrayList&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Name of the domain controller you&#39;d like to cleanup.  This should be the NETBIOS name, not the FQDN</span>
</span></span><span style="display:flex;"><span>$AD_DC_Name_To_Remove = <span style="color:#e6db74">&#34;Name-DC-Remove&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$AD_DC_Replacement_Name = <span style="color:#e6db74">&#34;Enter the name of the DC to move any FSMO roles too&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Name of your forrest domain name.  </span>
</span></span><span style="display:flex;"><span>$Forest_Fully_Qualified_Domain_Name = <span style="color:#e6db74">&#34;Forest.com&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#The netbios name of your domain.  if it&#39;s the same, leave it null</span>
</span></span><span style="display:flex;"><span>$NETBIOS_Domain_Name = $null
</span></span></code></pre></div>
<h2 id="getting-some-preliminary-domain-and-forest-information" data-numberify>Getting some preliminary domain and forest information<a class="anchor ms-1" href="#getting-some-preliminary-domain-and-forest-information"></a></h2>
<p>First we need some data that we don&rsquo;t have at the moment, like the all the domain information.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.WSUS v1.1.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.1.0/</link>
      <pubDate>Sun, 05 May 2019 21:11:08 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.1.0/</guid>
      <description><![CDATA[<h2 id="functions-released-in-this-module" data-numberify>Functions released in this module:<a class="anchor ms-1" href="#functions-released-in-this-module"></a></h2>
<ul>
<li>Get-ECSWSUSUpdateReport</li>
</ul>]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.All v2.3.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.all-v2.3.0/</link>
      <pubDate>Sun, 05 May 2019 21:09:30 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-module-release-ecs.all-v2.3.0/</guid>
      <description><![CDATA[<p>This is the easiest way to install all my modules in one shot.</p>
<p>Sub-modules released in this module:</p>
<ul>
<li>ECS.WSUS 1.1.0</li>
</ul>]]></description>
    </item>
    
    <item>
      <title>Deleting msExchActiveSyncDevice container after migrating to Office 365</title>
      <link>https://ericcsinger.com/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</link>
      <pubDate>Sat, 02 Mar 2019 22:03:38 +0000</pubDate>
      <guid>https://ericcsinger.com/deleting-msexchactivesyncdevice-container-after-migrating-to-office-365/</guid>
      <description><![CDATA[<p>We migrated to Office 365 last year and were are in the process of cleaning up some items left behind. One of the many things we’ve needed to clean up is stale activesync devices. I wanted to share a very simplified example of the code I used to delete the container in case it helps anyone in the future.</p>
<pre tabindex="0"><code>&lt;pre class=&#34;brush: powershell; title: ; notranslate&#34; title=&#34;&#34;&gt;
$UserNamePattern = &#34;*singer*&#34;


$AllActiveSyncDevices = Get-ADObject -filter { ObjectClass -like &#39;msExchActiveSyncDevice&#39;} | Where-Object {$_.DistinguishedName -like $($UserNamePattern)} 
$ActivesyncContainer = Get-ADObject -filter { ObjectClass -like &#39;msExchActiveSyncDevices&#39;} | Where-Object {$_.DistinguishedName -like $($UserNamePattern)} 

$ActivesyncContainer | Set-ADObject -ProtectedFromAccidentalDeletion:$false 
$AllActiveSyncDevices | Remove-ADObject -Confirm:$false
$ActivesyncContainer | Remove-ADObject -Confirm:$false
</code></pre><p>The essential steps we need to do are as follows:</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.WSUS v1.0.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.0.0/</link>
      <pubDate>Sat, 02 Mar 2019 21:21:30 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-module-release-ecs.wsus-v1.0.0/</guid>
      <description><![CDATA[<p>This is the initial release of my WSUS module. This is a module I put together to properly organize a lot of my one off WSUS functions.</p>
<p>I have found these functions useful for reporting n the status of computers in WSUS in mass. Querying the DB directly, while not recommended, is much faster than using the API, and you can get a lot more information out of it.</p>

<h2 id="functions-released-in-this-module" data-numberify>Functions released in this module:<a class="anchor ms-1" href="#functions-released-in-this-module"></a></h2>
<ul>
<li>Connect-ECSWSUSDatabase</li>
<li>Get-ECSWSUSComputerTarget</li>
<li>Get-ECSWSUSComputerTargetGroup</li>
<li>Get-ECSWSUSComputerTargetInTargetGroup</li>
<li>Get-ECSWSUSComputerTargetReport</li>
<li>Get-ECSWSUSUpdate</li>
<li>Test-ECSWSUSDatabaseConnected</li>
</ul>
<p>You can learn more about the module <a href="https://github.com/ericcsinger/ecs.wsus/wiki" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.LocalGPO v2.1.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.localgpo-v2.1.0/</link>
      <pubDate>Sun, 16 Sep 2018 16:27:19 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-module-release-ecs.localgpo-v2.1.0/</guid>
      <description><![CDATA[<p>This is the second release of my LocalGPO module. Mostly code enhancement, but a few property changes as well.</p>
<p>Functions released in this module:</p>
<ul>
<li>Add-ECSLocalGPOUserRightAssignment</li>
<li>Get-ECSLocalGPOUserRightAssignment</li>
<li>Remove-ECSLocalGPOUserRightAssignment</li>
<li>Show-ECSLocalGPOUserRightAssignment</li>
</ul>
<p>You can learn more about the module <a href="https://github.com/ericcsinger/ECS.LocalGPO/wiki" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.All v2.1.0</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.all-v2.1.0/</link>
      <pubDate>Sun, 16 Sep 2018 16:22:53 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-module-release-ecs.all-v2.1.0/</guid>
      <description><![CDATA[<p>This is the second release of my all encompassing module. This is the easiest way to install all my modules in one shot.</p>
<p>Sub-modules released in this module:</p>
<ul>
<li>ECS.LocalGPO v2.1.0</li>
<li>ECS.WindowsGeneric v1.1.0</li>
</ul>
<p>You can learn more about the module <a href="https://github.com/ericcsinger/ECS.All/wiki" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Module Release: ECS.WindowsGeneric v1.0.1</title>
      <link>https://ericcsinger.com/powershell-module-release-ecs.windowsgeneric-v1.0.1/</link>
      <pubDate>Sun, 15 Jul 2018 17:07:48 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-module-release-ecs.windowsgeneric-v1.0.1/</guid>
      <description><![CDATA[<p>This is the first release of what I hope to be more Powershell modules. As mentioned in my earlier posts, I won’t go into details of the module in my posts, instead I’ll direct you to my GitHub page where you can read about the modules, it’s functions and release notes.</p>
<p>Functions released in this module:</p>
<ul>
<li>Convert ECSSIDToAccount</li>
<li>Convert ECSAccountToSID</li>
</ul>
<p>You can learn more about the module <a href="https://github.com/ericcsinger/ECS.WindowsGeneric/wiki" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>]]></description>
    </item>
    
    <item>
      <title>Problem Solving: VMware VM not reading VMDK serial number in OS</title>
      <link>https://ericcsinger.com/problem-solving-vmware-vm-not-reading-vmdk-serial-number-in-os/</link>
      <pubDate>Mon, 19 Mar 2018 12:52:31 +0000</pubDate>
      <guid>https://ericcsinger.com/problem-solving-vmware-vm-not-reading-vmdk-serial-number-in-os/</guid>
      <description><![CDATA[<p>I created a function while ago that utilizes the VMDK serial number to map which VMDK is used for a Windows volume. Starting with Windows 10 / Server 2016, I noticed that I could no longer see the serial number of a VMDK insides the OS. After reaching out to VMware, turned out to be a really simple fix.</p>
<p>First let me share the relevant KB:</p>
<p><a href="https://kb.vmware.com/s/article/52815" target="_blank" rel="noopener noreferrer">https://kb.vmware.com/s/article/52815<i class="fas fa-external-link-square-alt ms-1"></i></a></p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSWSUSComputerUpdatesStatusReport</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecswsuscomputerupdatesstatusreport/</link>
      <pubDate>Sat, 07 Oct 2017 20:38:40 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-get-ecswsuscomputerupdatesstatusreport/</guid>
      <description><![CDATA[<h1 id="introduction" data-numberify>Introduction:<a class="anchor ms-1" href="#introduction"></a></h1>
<p>I hate the WSUS reports built into the console. They’re slow, and when it comes to doing something useful with the data, it’s basically impossible. That’s why I wrote this function.</p>
<p>I wanted an ability to gather data on a given WSUS computer(s), and work with it in Powershell. This function gives me the ability to write scripts for bulk reports, automate my patching process (checking that all updates are done), and in general, gives me the same data the standard WSUS report does, but at a MUCH faster rate.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Microsoft Exchange, Configure client-specific message size limits</title>
      <link>https://ericcsinger.com/powershell-scripting-microsoft-exchange-configure-client-specific-message-size-limits/</link>
      <pubDate>Mon, 03 Jul 2017 22:14:22 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-microsoft-exchange-configure-client-specific-message-size-limits/</guid>
      <description><![CDATA[<h1 id="introduction" data-numberify>Introduction:<a class="anchor ms-1" href="#introduction"></a></h1>
<p>If you don’t know by now, I’m a huge PowerShell fan. It’s my go to scripting language for anything related to Microsoft (and non-Microsoft) automation and administration. So when it came time to automating post exchange cumulative update setting, I was a bit surprised to see some of the code examples from Microsoft, not containing any PowerShell example. Surprised is probably the wrong word, how about annoyed? I mean, after all, this is not only the company that shoved this awesome scripting language down our throat, but also the very team that was the first one to have a comprehensive set of admin abilities via PowerShell. So if that’s the case, why in the world, don’t they have a single PS example for configuring client-specific message size limits?</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSESXHostVIBToPCIDevices</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsesxhostvibtopcidevices/</link>
      <pubDate>Fri, 30 Jun 2017 21:20:28 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsesxhostvibtopcidevices/</guid>
      <description><![CDATA[<h1 id="introduction" data-numberify>Introduction:<a class="anchor ms-1" href="#introduction"></a></h1>
<p>If you remember a little bit ago, I said I was trying to work around the lack of driver management with vendors. This function is the start of a few tools you can use to potentially make your life a little easier.</p>
<p>VMware’s drivers are VIBS (but not all VIBS are drivers). So the key to knowing if you have the correct drivers is to find which VIB matches which PCI device. This function does that work for you.</p>]]></description>
    </item>
    
    <item>
      <title>Quicky Review: GPO/GPP vs. DSC</title>
      <link>https://ericcsinger.com/quicky-review-gpo/gpp-vs.-dsc/</link>
      <pubDate>Sun, 18 Sep 2016 16:10:12 +0000</pubDate>
      <guid>https://ericcsinger.com/quicky-review-gpo/gpp-vs.-dsc/</guid>
      <description><![CDATA[<h1 id="introduction" data-numberify>Introduction:<a class="anchor ms-1" href="#introduction"></a></h1>
<p>If you’re not in a DevOps based shop, or living under a rock, you may not know that Microsoft has been working on a solution that by all accounts sounds like its poised to usurp GPO / GPP. The solution I’m talking about is Desired State Configuration, or DSC. According to all the marketing hype, DSC is the next best thing for IT since virtualization. If the vision comes to fruition, GPO and GPP will be a legacy solution. Enterprise mobility management will be used for desktops and DSC will be used for servers. Given that I currently manage 700 VM’s and about an equal number of desktops, I figured why not take it for a test drive. So I stood up a simplistic environment, and played around with it for a full week and my conclusion is this.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Invoke-ECSSQLQuery</title>
      <link>https://ericcsinger.com/powershell-scripting-invoke-ecssqlquery/</link>
      <pubDate>Mon, 04 Jul 2016 19:13:41 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-invoke-ecssqlquery/</guid>
      <description><![CDATA[<p>Quick Powershell post for those of you that may on occasion want to retrieve data out of a SQL table via Powershell. I didn’t personally do most of the heavy lifting in this, I simply took some work that various folks out there did and put it into a repeatable function instead.</p>
<p>Firstly, head over to <a href="https://github.com/ericcsinger/Powershell/tree/master/Microsoft/SQL/Invoke-ECSSQLQuery" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a> to my GitHub if you want to grab it. I’ll be keeping it updated as change requests come in, or as I get new ideas, so make sure if you do use my function, that you check back in on occasion for new versions.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSVMwareVirtualDiskToWindowsLogicalDiskMapping</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsvmwarevirtualdisktowindowslogicaldiskmapping/</link>
      <pubDate>Sat, 26 Dec 2015 21:56:08 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsvmwarevirtualdisktowindowslogicaldiskmapping/</guid>
      <description><![CDATA[<p>Building off my last function <a href="https://github.com/ericcsinger/powershell_microsoft_windows_get-ecsphysicaldisktologicaldiskmapping" target="_blank" rel="noopener noreferrer">Get-ECSPhysicalDiskToLogicalDiskMapping<i class="fas fa-external-link-square-alt ms-1"></i></a>: which took a windows physical disk and mapped it to a windows logical disk, this function will take a VMware virtual disk and map it to a windows logical disk.</p>
<p>This function has the following dependencies and assumptions:</p>
<ul>
<li>It depends on my windows physical to logical function and all its dependencies.</li>
<li>It assumes your VM name matches your windows server name</li>
<li>It assumes you’ve pre-loaded the VMware powershell snap-in.</li>
</ul>
<p>The basic way the function works, is it starts by getting the windows physical to logical mapping and storing that in an array. This array houses two key peaces of information.</p>]]></description>
    </item>
    
    <item>
      <title>Powershell Scripting: Get-ECSPhysicalDiskToLogicalDiskMapping</title>
      <link>https://ericcsinger.com/powershell-scripting-get-ecsphysicaldisktologicaldiskmapping/</link>
      <pubDate>Sun, 20 Dec 2015 16:50:39 +0000</pubDate>
      <guid>https://ericcsinger.com/powershell-scripting-get-ecsphysicaldisktologicaldiskmapping/</guid>
      <description><![CDATA[<p>I figured it was about time to knock out something a little technical for a change, and I figured I’d start with this little function, which is part of a larger script that I’ll talk more about later.</p>
<p>There may be a time where you need to find the relationship between a physical disk drive and your logical drive. In my case, I had a colleague ask me if there was an easy way to match a VMware disk to a Window disk so he could extend the proper drive. After digging into it a bit, I determined it was possible, but it was going to take a little work. One of the prerequisites is to first find which drive letter belongs to which physical disk (from windows view).</p>]]></description>
    </item>
    
  </channel>
</rss>

